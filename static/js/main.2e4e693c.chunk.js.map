{"version":3,"sources":["components/MovieItem.jsx","components/MovieTabs.jsx","components/Pagination.jsx","components/App.jsx","utils/api.js","serviceWorker.js","index.js"],"names":["MovieItem","props","getButtonClassnames","classnames","btn","state","willWatch","getButtonTitle","handleClick","movie","removeMovieToWillWatch","addMovieToWillWatch","setState","this","removeMovie","className","src","backdrop_path","alt","title","vote_average","type","onClick","React","Component","MovieTabs","value","event","updateSortBy","getClassLink","sort_by","nextProps","nextState","console","log","Pagination","page","total_pages","pageUp","pageDown","App","updateMovies","movies","filter","item","id","moviesWillWatch","getMovies","fetch","then","response","json","data","results","prevProps","prevState","map","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4NA4DeA,E,kDAxDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,oBAAsB,WAClB,OAAOC,IAAW,CACdC,KAAK,EACL,cAAe,EAAKC,MAAMC,UAC1B,iBAAkB,EAAKD,MAAMC,aAZlB,EAgBnBC,eAAiB,WACb,OAAO,EAAKF,MAAMC,UAAY,oBAAsB,kBAjBrC,EAoBnBE,YAAc,WAAM,IAAD,EAC+C,EAAKP,MAA3DQ,EADO,EACPA,MAAOC,EADA,EACAA,uBAAwBC,EADxB,EACwBA,oBACjCL,GAAa,EAAKD,MAAMC,UAC3BA,EACCK,EAAoBF,GAEpBC,EAAuBD,GAG3B,EAAKG,SAAS,CACVN,UAAWA,KA3Bf,EAAKD,MAAQ,CACTC,WAAW,GAJA,E,qDAkCT,IAAD,EACyBO,KAAKZ,MAA3BQ,EADH,EACGA,MAAOK,EADV,EACUA,YACf,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,eACXC,IAAG,yCAAoCP,EAAMQ,eAC7CC,IAAI,KACR,yBAAKH,UAAU,aACX,wBAAIA,UAAU,cAAcN,EAAMU,OAClC,yBAAKJ,UAAU,qDACX,uBAAGA,UAAU,QAAb,WAA6BN,EAAMW,cACnC,4BAAQC,KAAK,SAASN,UAAWF,KAAKX,sBAAuBoB,QAAST,KAAKL,aACtEK,KAAKN,mBAGd,4BAAQc,KAAK,SAASC,QAAS,kBAAMR,EAAYL,KAAjD,sB,GAlDIc,IAAMC,WC0CfC,E,4MAxCXjB,YAAc,SAACkB,GACX,OAAO,SAAAC,GACH,EAAK1B,MAAM2B,aAAaF,K,EAIhCG,aAAe,SAACH,GACZ,OAAOvB,IAAW,CACd,YAAY,EACZ,OAAU,EAAKF,MAAM6B,UAAYJ,K,oEAInBK,EAAWC,GAC7B,OAAOnB,KAAKZ,MAAM6B,UAAYC,EAAUD,U,+BAMxC,OAFAG,QAAQC,IAAI,oBAGR,wBAAInB,UAAU,sBACV,wBAAIA,UAAU,YACV,yBAAKA,UAAWF,KAAKgB,aAAa,mBAC9BP,QAAST,KAAKL,YAAY,oBAD9B,oBAIJ,wBAAIO,UAAU,YACV,yBAAKA,UAAWF,KAAKgB,aAAa,gBAC9BP,QAAST,KAAKL,YAAY,iBAD9B,iBAGJ,wBAAIO,UAAU,YACV,yBAAKA,UAAWF,KAAKgB,aAAa,qBAC9BP,QAAST,KAAKL,YAAY,sBAD9B,2B,GAlCIe,IAAMC,WCYfW,E,uKAZD,IAAD,EAC2CtB,KAAKZ,MAA7CmC,EADH,EACGA,KAAMC,EADT,EACSA,YAAaC,EADtB,EACsBA,OAAQC,EAD9B,EAC8BA,SACnC,OACI,6BACI,4BAAQxB,UAAU,kBAAkBM,KAAK,SAASC,QAAS,kBAAMiB,MAAjE,kCACA,0BAAMxB,UAAU,OAAhB,UAA0BqB,EAA1B,iBAAuCC,IACvC,4BAAQtB,UAAU,kBAAkBM,KAAK,SAASC,QAAS,kBAAMgB,MAAjE,6C,GAPSf,IAAMC,WCqIhBgB,E,kDAhIb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRa,YAAc,SAACL,GACb,IAAMgC,EAAe,EAAKpC,MAAMqC,OAAOC,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOpC,EAAMoC,MAC1E,EAAKjC,SAAS,CACZ8B,OAAQD,KA1BO,EA8BnB9B,oBAAsB,SAACF,GACrB,IAAIgC,EAAY,sBAAO,EAAKpC,MAAMyC,iBAAlB,CAAmCrC,IACnD,EAAKG,SAAS,CACZkC,gBAAiBL,KAjCF,EAqCnB/B,uBAAyB,SAACD,GACxB,IAAMgC,EAAe,EAAKpC,MAAMyC,gBAAgBH,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOpC,EAAMoC,MACnF,EAAKjC,SAAS,CACZkC,gBAAiBL,KAxCF,EA4CnBb,aAAe,SAACF,GACd,EAAKd,SAAS,CACZkB,QAASJ,KA9CM,EAkDnBY,OAAS,WACH,EAAKjC,MAAM+B,KAAO,EAAK/B,MAAMgC,aAC/B,EAAKzB,UAAS,SAAUP,EAAOJ,GAC7B,MAAO,CACLmC,KAAM/B,EAAM+B,KAAO,OAtDR,EA4DnBG,SAAW,WACL,EAAKlC,MAAM+B,KAAO,GACpB,EAAKxB,UAAS,SAAUP,EAAOJ,GAC7B,MAAO,CACLmC,KAAM/B,EAAM+B,KAAO,OAhER,EAsEnBW,UAAY,WACVC,MAAM,uDAAD,OC5EgB,mCD4EhB,oBAA6E,EAAK3C,MAAMyB,QAAxF,iBAAwG,EAAKzB,MAAM+B,OAAQa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACG,GACtK,EAAKxC,SAAS,CACZ8B,OAAQU,EAAKC,QACbjB,KAAMgB,EAAKhB,KACXC,YAAae,EAAKf,kBAxEtB,EAAKhC,MAAQ,CACXqC,OAAQ,GACRI,gBAAiB,GACjBhB,QAAS,kBACTM,KAAM,EACNC,YAAa,GARE,E,gEAajBxB,KAAKkC,c,yCAGYO,EAAWC,GACxBA,EAAUzB,UAAYjB,KAAKR,MAAMyB,SAAWyB,EAAUnB,OAASvB,KAAKR,MAAM+B,OAC5EH,QAAQC,IAAI,iBACZrB,KAAKkC,e,+BA6DC,IAAD,OAEP,OADAd,QAAQC,IAAI,cAEV,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAWe,QAASjB,KAAKR,MAAMyB,QAASF,aAAcf,KAAKe,iBAG/D,yBAAKb,UAAU,OAEXF,KAAKR,MAAMqC,OAAOc,KAAI,SAAC/C,GACrB,OACE,yBAAKgD,IAAKhD,EAAMoC,GAAI9B,UAAU,cAC5B,kBAAC,EAAD,CAAWN,MAAOA,EAChBK,YAAa,EAAKA,YAClBH,oBAAqB,EAAKA,oBAC1BD,uBAAwB,EAAKA,+BAO3C,yBAAKK,UAAU,SACb,2CAAiBF,KAAKR,MAAMyC,gBAAgBY,OAA5C,WACA,wBAAI3C,UAAU,cACXF,KAAKR,MAAMyC,gBAAgBU,KAAI,SAAA/C,GAAK,OACnC,wBAAIgD,IAAKhD,EAAMoC,GAAI9B,UAAU,mBAC3B,yBAAKA,UAAU,kCACb,2BAAIN,EAAMU,OACV,2BAAIV,EAAMW,qBAMpB,yBAAKL,UAAU,0DACb,kBAAC,EAAD,CAAYqB,KAAMvB,KAAKR,MAAM+B,KAAMC,YAAaxB,KAAKR,MAAMgC,YAAaC,OAAQzB,KAAKyB,OAAQC,SAAU1B,KAAK0B,kB,GAzHtGhB,IAAMC,WEMJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.2e4e693c.chunk.js","sourcesContent":["import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nclass MovieItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            willWatch: false\r\n        };\r\n    }\r\n\r\n    getButtonClassnames = () => {\r\n        return classnames({\r\n            btn: true,\r\n            'btn-success': this.state.willWatch,\r\n            'btn-secondary': !this.state.willWatch\r\n        })\r\n    }\r\n\r\n    getButtonTitle = ()=> {\r\n        return this.state.willWatch ? 'Remove will Watch' : 'Add will Watch';\r\n    }\r\n\r\n    handleClick = ()=> {\r\n        const { movie, removeMovieToWillWatch, addMovieToWillWatch} = this.props;\r\n        const willWatch = !this.state.willWatch;\r\n        if(willWatch) {\r\n            addMovieToWillWatch(movie);\r\n        }else {\r\n            removeMovieToWillWatch(movie);\r\n        }\r\n\r\n        this.setState({\r\n            willWatch: willWatch\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { movie, removeMovie} = this.props;\r\n        return (\r\n            <div className=\"card\">\r\n                <img className=\"card-img-top\"\r\n                    src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\r\n                    alt=\"\" />\r\n                <div className=\"card-body\">\r\n                    <h6 className=\"card-title\">{movie.title}</h6>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                        <p className=\"mb-0\">Rating: {movie.vote_average}</p>\r\n                        <button type=\"button\" className={this.getButtonClassnames()} onClick={this.handleClick}>\r\n                            {this.getButtonTitle()}\r\n                        </button>\r\n                    </div>\r\n                    <button type=\"button\" onClick={() => removeMovie(movie)}>Delete movie</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieItem;","import React from 'react';\r\nimport classnames from 'classnames'; \r\n\r\nclass MovieTabs extends React.Component {\r\n\r\n    handleClick = (value) => {\r\n        return event => {\r\n            this.props.updateSortBy(value);\r\n        }\r\n    }\r\n\r\n    getClassLink = (value) => {\r\n        return classnames({\r\n            'nav-link': true,\r\n            'active': this.props.sort_by === value\r\n        });\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.sort_by !== nextProps.sort_by ? true: false;\r\n    }\r\n\r\n    render() {\r\n        console.log(\"MovieTabs render\");\r\n\r\n        return (\r\n            <ul className=\"tabs nav nav-pills\">\r\n                <li className=\"nav-item\">\r\n                    <div className={this.getClassLink(\"popularity.desc\")}\r\n                        onClick={this.handleClick(\"popularity.desc\")}\r\n                    >Popularity desc</div>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <div className={this.getClassLink(\"revenue.desc\")}\r\n                        onClick={this.handleClick(\"revenue.desc\")}>Revenue desc</div>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <div className={this.getClassLink(\"vote_average.desc\")}\r\n                        onClick={this.handleClick(\"vote_average.desc\")}>Vote average desc</div>\r\n                </li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieTabs;","import React from 'react';\r\n\r\nclass Pagination extends React.Component {\r\n    render() {\r\n        const { page, total_pages, pageUp, pageDown } = this.props;\r\n        return (\r\n            <div> \r\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => pageDown()}>Назад</button>\r\n                <span className=\"m-2\">{`${page} from ${total_pages}`}</span>\r\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => pageUp()}>Вперед</button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Pagination;","import React from 'react';\nimport MovieItem from './MovieItem';\nimport MovieTabs from './MovieTabs';\nimport Pagination from './Pagination';\nimport { API_KEY_3 } from '../utils/api'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sort_by: \"popularity.desc\",\n      page: 1,\n      total_pages: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sort_by !== this.state.sort_by || prevState.page !== this.state.page) {\n      console.log(\"App didUpdate\");\n      this.getMovies();\n    }\n  }\n\n  removeMovie = (movie) => {\n    const updateMovies = this.state.movies.filter((item) => item.id !== movie.id);\n    this.setState({\n      movies: updateMovies\n    });\n  }\n\n  addMovieToWillWatch = (movie) => {\n    let updateMovies = [...this.state.moviesWillWatch, movie];\n    this.setState({\n      moviesWillWatch: updateMovies\n    });\n  }\n\n  removeMovieToWillWatch = (movie) => {\n    const updateMovies = this.state.moviesWillWatch.filter((item) => item.id !== movie.id);\n    this.setState({\n      moviesWillWatch: updateMovies\n    });\n  }\n\n  updateSortBy = (value) => {\n    this.setState({\n      sort_by: value\n    });\n  }\n\n  pageUp = () => {\n    if (this.state.page < this.state.total_pages) {\n      this.setState(function (state, props) {\n        return {\n          page: state.page + 1\n        }\n      });\n    }\n  }\n\n  pageDown = () => {\n    if (this.state.page > 1) {\n      this.setState(function (state, props) {\n        return {\n          page: state.page - 1\n        }\n      });\n    }\n  }\n\n  getMovies = () => {\n    fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sort_by}&page=${this.state.page}`).then(response => response.json()).then((data) => {\n      this.setState({\n        movies: data.results,\n        page: data.page,\n        total_pages: data.total_pages\n      });\n    });\n  }\n\n  render() {\n    console.log(\"App render\");\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-9\">\n            <div className=\"row mb-4\">\n              <div className=\"col-12\">\n                <MovieTabs sort_by={this.state.sort_by} updateSortBy={this.updateSortBy} />\n              </div>\n            </div>\n            <div className=\"row\">\n              {\n                this.state.movies.map((movie) => {\n                  return (\n                    <div key={movie.id} className=\"col-6 mb-4\">\n                      <MovieItem movie={movie}\n                        removeMovie={this.removeMovie}\n                        addMovieToWillWatch={this.addMovieToWillWatch}\n                        removeMovieToWillWatch={this.removeMovieToWillWatch}\n                      />\n                    </div>);\n                })\n              }\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <h4>Will Watch: {this.state.moviesWillWatch.length} movies</h4>\n            <ul className=\"list-group\">\n              {this.state.moviesWillWatch.map(movie => (\n                <li key={movie.id} className=\"list-group-item\">\n                  <div className=\"d-flex justify-content-between\">\n                    <p>{movie.title}</p>\n                    <p>{movie.vote_average}</p>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"row mb-4 container-fluid d-flex justify-content-center\">\n            <Pagination page={this.state.page} total_pages={this.state.total_pages} pageUp={this.pageUp} pageDown={this.pageDown} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const API_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\r\n\r\nexport const API_KEY_4 =\r\n  \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}